// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id             String        @id @unique @default(uuid())
  identifier     String        @unique
  publicKey      String        @unique
  label          String
  lastOperation  DateTime
  sourceOf       Transaction[] @relation(name: "src")
  destionationOf Transaction[] @relation(name: "dest")
  Wallet_Pool    Wallet_Pool[]
  User_Wallet    User_Wallet[]
}

model Pool {
  id            String          @id @unique @default(uuid())
  name          String
  maxDebit      Float
  Wallet_Pool   Wallet_Pool[]
  Pool_Currency Pool_Currency[]
}

model Wallet_Pool {
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String
  pool     Pool   @relation(fields: [poolId], references: [id])
  poolId   String

  @@id([walletId, poolId])
}

model Currency {
  id                   String                 @id @unique @default(uuid())
  name                 String
  symbol               String
  isFiat               Boolean
  asInputOf            Change[]               @relation(name: "in")
  asOutputOf           Change[]               @relation(name: "out")
  Price                Price[]
  Currency_Transaction Currency_Transaction[]
  Pool_Currency        Pool_Currency[]
}

model Pool_Currency {
  maxAmmount Float
  maxDebit   Float

  pool       Pool     @relation(fields: [poolId], references: [id])
  poolId     String
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String

  @@id([poolId, currencyId])
}

model Change {
  id               String   @id @unique @default(uuid())
  rate             Float
  isStable         Boolean
  expires          DateTime
  inputCurrency    Currency @relation(name: "in", fields: [inputCurrencyId], references: [id])
  outputCurrency   Currency @relation(name: "out", fields: [outputCurrencyId], references: [id])
  inputCurrencyId  String   @ignore
  outputCurrencyId String   @ignore
}

model Transaction {
  id                   String                 @id @unique @default(uuid())
  sourceWallet         Wallet                 @relation(name: "src", fields: [fromWalletId], references: [id])
  destinationWallat    Wallet                 @relation(name: "dest", fields: [toWalletId], references: [id])
  chainedWith          Transaction?           @relation(name: "tree", fields: [parentTransactionId], references: [id])
  children             Transaction?           @relation(name: "tree")
  time                 DateTime
  fromWalletId         String                 @ignore
  toWalletId           String                 @ignore
  parentTransactionId  String                 @unique @ignore
  Currency_Transaction Currency_Transaction[]
  Ticket_Transaction   Ticket_Transaction[]
}

model Currency_Transaction {
  currency      Currency    @relation(fields: [currencyId], references: [id])
  currencyId    String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  @@id([currencyId, transactionId])
}

model Category {
  id              String            @id @unique @default(uuid())
  name            String
  Category_Ticket Category_Ticket[]
}

model Ticket {
  id                 String               @id @unique @default(uuid())
  name               String
  description        String
  imageCode          String
  expires            DateTime
  color              String
  Category_Ticket    Category_Ticket[]
  Price              Price[]
  Ticket_Transaction Ticket_Transaction[]
  Event_Ticket       Event_Ticket[]
}

model Category_Ticket {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  ticketId   String

  @@id([categoryId, ticketId])
}

model Ticket_Transaction {
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  ticketId      String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  @@id([ticketId, transactionId])
}

model Price {
  value      Float
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  ticketId   String
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String

  @@id([ticketId, currencyId])
}

model Event {
  id           String         @id @unique @default(uuid())
  name         String
  start        DateTime
  end          DateTime
  place        String
  Event_Ticket Event_Ticket[]
}

model Event_Ticket {
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  @@id([eventId, ticketId])
}

model User {
  id          String        @id @unique @default(uuid())
  username    String
  firstname   String
  lastname    String
  mail        String
  password    String
  User_Wallet User_Wallet[]
}

model User_Wallet {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  @@id([userId, walletId])
}
